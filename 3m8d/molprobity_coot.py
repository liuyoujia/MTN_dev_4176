# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  90 ', 'VAL', 0.0, (29.545000000000016, -36.49200000000001, -6.665999999999998)), ('A', ' 116 ', 'ALA', 0.015857311570291757, (33.40200000000001, -39.616, -30.569999999999986)), ('A', ' 281 ', 'TYR', 0.04116918300363226, (24.157000000000004, -21.886000000000006, 13.319999999999995)), ('A', ' 283 ', 'ARG', 0.009132633152360016, (27.195000000000007, -23.229000000000006, 6.701999999999997)), ('A', ' 285 ', 'ASP', 0.02153006297963716, (29.515999999999995, -25.932999999999993, 11.218999999999994)), ('A', ' 333 ', 'TYR', 0.013282130179312963, (39.918000000000006, -36.433000000000014, -4.972999999999997)), ('A', ' 535 ', 'PRO', 0.00301368, (9.466000000000008, -50.63600000000002, 0.755))]
data['omega'] = [('A', '  89 ', 'GLY', None, (29.200000000000003, -32.214, -7.549999999999998)), ('A', ' 535 ', 'PRO', None, (9.025000000000006, -50.55200000000001, 2.163))]
data['rota'] = [('A', '  21 ', 'THR', 0.02447880688123405, (25.014, -30.575999999999997, -43.22999999999999)), ('A', ' 138 ', 'THR', 0.17472219717389104, (23.901, -1.4389999999999992, -23.882999999999992)), ('A', ' 141 ', 'SER', 0.15150563232849057, (16.037, -4.6, -18.121)), ('A', ' 322 ', 'THR', 0.2666543017523393, (37.687, -32.073, -5.537)), ('A', ' 381 ', 'GLU', 0.28918000346457445, (15.033000000000008, -32.441, -54.084)), ('A', ' 533 ', 'SER', 0.1609898066497294, (6.260000000000005, -45.742000000000004, 3.088999999999998)), ('A', ' 539 ', 'VAL', 0.29696040738680696, (3.184000000000004, -45.10300000000001, -8.645)), ('A', ' 548 ', 'ASP', 0.2542215123897554, (1.4530000000000034, -20.262, -21.329)), ('A', ' 587 ', 'THR', 0.02364644302766553, (5.341000000000005, -11.894000000000004, -15.24))]
data['cbeta'] = []
data['probe'] = [(' A 283  ARG  NH2', ' A 284  TYR  OH ', -1.107, (31.888, -19.489, 2.971)), (' A 704  C8E  H13', ' A 704  C8E  H52', -0.766, (4.949, -37.962, -39.475)), (' A 283  ARG  NH2', ' A 284  TYR  CZ ', -0.702, (31.793, -19.611, 4.503)), (' A 701  CNC H351', ' A 701  CNC H362', -0.688, (21.951, -31.59, -0.924)), (' A 572  ASP  OD1', ' A 580  GLN  NE2', -0.654, (0.837, -29.298, -7.632)), (' A 138  THR HG22', ' A 156  THR  OG1', -0.645, (26.946, -1.125, -23.914)), (' A 704  C8E  C5 ', ' A 704  C8E  H13', -0.589, (5.088, -37.548, -40.081)), (' A 166  VAL HG22', ' A 206  LEU  CD2', -0.585, (36.616, -5.599, -22.841)), (' A 429  VAL HG22', ' A 470  PHE  HB3', -0.583, (4.447, -26.551, -42.857)), (' A 167  THR  O  ', ' A 168  LEU HD23', -0.558, (32.457, -7.31, -20.149)), (' A  13  ASN  O  ', ' A  14  ARG  HB2', -0.551, (34.983, -28.834, -33.68)), (' A 516  TRP  CZ3', ' A 551  VAL  CG1', -0.546, (-0.493, -10.748, -25.673)), (' A 704  C8E  H13', ' A 704  C8E  H82', -0.54, (4.883, -36.401, -38.937)), (' A  72  ASN  OD1', ' A 498  ARG  NH2', -0.538, (17.829, -43.536, -17.126)), (' A 275  TYR  CE1', ' A 290  LEU HD13', -0.536, (31.382, -25.162, 0.862)), (' A 701  CNC H252', ' A 701  CNC H601', -0.535, (15.003, -35.106, -3.725)), (' A 132  THR HG21', ' A 833  HOH  O  ', -0.527, (33.094, -14.939, -26.609)), (' A  36  ARG  NH2', ' A 508  ASP  OD1', -0.523, (5.956, -15.97, -31.112)), (' A 429  VAL HG22', ' A 470  PHE  CB ', -0.522, (4.048, -25.792, -42.615)), (' A 324  PRO  HA ', ' A 333  TYR  CE1', -0.521, (37.788, -34.984, -0.094)), (' A 308  HIS  HD2', ' A 813  HOH  O  ', -0.513, (33.495, -34.044, -54.329)), (' A 391  THR  HA ', ' A 415  SER  O  ', -0.513, (27.514, -46.796, -28.743)), (' A 358  ARG  O  ', ' A 702  C8E  H82', -0.51, (38.032, -43.732, -30.255)), (' A  91  SER  HB3', ' A 701  CNC H451', -0.5, (25.115, -35.831, -7.358)), (' A  66  ILE HD11', ' A  96  LEU HD12', -0.498, (19.893, -30.202, -17.565)), (' A 430  ASN  O  ', ' A 468  ALA  HA ', -0.496, (8.269, -29.634, -40.072)), (' A 488  ASN  O  ', ' A 492  ASP  N  ', -0.492, (13.053, -54.621, -18.222)), (' A 701  CNC  N3B', ' A 701  CNC H202', -0.49, (18.955, -35.785, -5.225)), (' A  61  GLY  O  ', ' A 227  THR HG21', -0.49, (17.395, -24.8, -5.294)), (' A 166  VAL HG22', ' A 206  LEU HD21', -0.489, (37.406, -5.687, -22.43)), (' A 334  ASP  C  ', ' A 334  ASP  OD1', -0.487, (42.729, -36.558, -10.026)), (' A 330  GLU  CA ', ' A 330  GLU  OE1', -0.486, (41.255, -39.484, 2.018)), (' A 332  GLY  O  ', ' A 333  TYR  CB ', -0.486, (41.172, -37.773, -3.708)), (' A 186  THR  OG1', ' A 190  ALA  HA ', -0.485, (8.033, -31.887, 6.014)), (' A 299  GLN  HG2', ' A 316  ASP  OD1', -0.482, (39.276, -30.826, -24.908)), (' A 100  PRO  HG2', ' A 103  LEU HD22', -0.481, (25.053, -16.856, -16.024)), (' A 324  PRO  HA ', ' A 333  TYR  HE1', -0.479, (37.63, -35.179, 0.169)), (' A 450  THR  O  ', ' A 450  THR HG22', -0.476, (30.062, -55.968, -2.304)), (' A 332  GLY  O  ', ' A 333  TYR  HB2', -0.471, (41.502, -37.743, -4.091)), (' A  91  SER  OG ', ' A  92  GLY  N  ', -0.468, (24.736, -37.826, -9.819)), (' A  81  ASP  C  ', ' A 708  MTN  H81', -0.465, (31.9, -22.522, -25.931)), (' A 588  LEU HD23', ' A 589  SER  N  ', -0.464, (6.508, -6.572, -17.642)), (' A 189  GLN  HB2', ' A 233  TYR  HD2', -0.463, (9.718, -31.993, 11.607)), (' A 704  C8E  C1 ', ' A 704  C8E  H82', -0.463, (4.614, -36.938, -38.645)), (' A  66  ILE  O  ', ' A  73  ALA  HA ', -0.461, (19.242, -36.49, -17.303)), (' A 405  TYR  CD1', ' A 405  TYR  N  ', -0.461, (28.788, -47.261, -0.472)), (' A 523  LEU  O  ', ' A 543  GLY  HA2', -0.458, (1.043, -35.966, -18.587)), (' A  81  ASP  CA ', ' A 708  MTN  H81', -0.458, (31.596, -21.802, -25.704)), (' A 516  TRP  CE3', ' A 551  VAL HG12', -0.457, (-0.097, -11.627, -26.475)), (' A  84  ARG  NH1', ' A 318  GLN  OE1', -0.457, (35.421, -33.237, -19.325)), (' A 293  MET  HG2', ' A 294  LYS  N  ', -0.449, (36.917, -28.999, -8.951)), (' A 201  THR  O  ', ' A 202  LEU HD12', -0.448, (26.603, -9.713, -12.035)), (' A 701  CNC  C36', ' A 701  CNC H351', -0.447, (22.025, -31.866, -0.703)), (' A  63  LEU HD12', ' A  95  ASP  CG ', -0.441, (20.011, -29.772, -9.526)), (' A 582  ALA  HB1', ' A 585  GLU  OE2', -0.441, (4.95, -20.723, -10.356)), (' A  12  ALA  HB3', ' A  17  GLN  NE2', -0.44, (28.487, -30.314, -36.821)), (' A 701  CNC  C2B', ' A 701  CNC  O7R', -0.438, (19.413, -36.883, -6.776)), (' A 443  LEU HD12', ' A 457  GLY  C  ', -0.437, (22.054, -51.91, -17.127)), (' A 229  TYR  O  ', ' A 241  ASP  HB2', -0.436, (14.572, -26.753, 3.208)), (' A 143  GLY  C  ', ' A 144  TRP  CE3', -0.436, (9.741, -6.369, -12.444)), (' A 240  LEU HD23', ' A 277  TYR  HA ', -0.435, (22.781, -28.106, 6.477)), (' A 704  C8E  C8 ', ' A 704  C8E  H13', -0.434, (5.346, -36.454, -39.189)), (' A 293  MET  HG3', ' A 322  THR HG22', -0.431, (35.832, -32.049, -8.386)), (' A 466  ALA  HB1', ' A 704  C8E H112', -0.43, (5.771, -35.652, -36.542)), (' A 362  ASN  CB ', ' A 365  PHE  CE1', -0.428, (38.531, -42.434, -17.835)), (' A 103  LEU HD13', ' A 201  THR HG21', -0.428, (25.444, -14.723, -15.412)), (' A 220  GLY  HA2', ' A 249  SER  O  ', -0.428, (35.079, -16.842, -16.235)), (' A  95  ASP  OD1', ' A  97  SER  OG ', -0.425, (19.189, -26.788, -10.439)), (' A  27  THR HG21', ' A  49  LEU HD22', -0.422, (14.959, -26.707, -29.271)), (' A 437  ARG  NH2', ' A 460  ARG  HD3', -0.419, (16.662, -54.163, -27.305)), (' A  91  SER  HB3', ' A 701  CNC  N45', -0.418, (25.094, -35.31, -7.192)), (' A 546  LEU HD11', ' A 573  TYR  CZ ', -0.416, (3.088, -28.386, -15.365)), (' A 434  SER  O  ', ' A 464  VAL  HA ', -0.413, (11.343, -41.781, -33.557)), (' A 543  GLY  C  ', ' A 544  VAL HG13', -0.412, (-0.792, -34.575, -16.415)), (' A  81  ASP  HB3', ' A 708  MTN  H81', -0.411, (32.274, -21.401, -25.605)), (' A 534  TYR  CG ', ' A 535  PRO  N  ', -0.411, (9.831, -50.039, 2.782)), (' A  66  ILE HD11', ' A  96  LEU  CD1', -0.411, (20.222, -30.049, -17.395)), (' A 219  ARG  HD2', ' A 865  HOH  O  ', -0.411, (33.368, -18.283, -20.754)), (' A 271  HIS  CE1', ' A 273  LYS  HG3', -0.41, (35.058, -22.548, -4.76)), (' A  69  ARG  NH2', ' A 465  GLU  OE1', -0.409, (15.853, -37.121, -32.302)), (' A 239  LEU  O  ', ' A 278  ASP  HB2', -0.408, (19.897, -27.508, 8.954)), (' A 348  VAL  O  ', ' A 348  VAL HG13', -0.406, (27.685, -38.456, -52.844)), (' A 115  SER  C  ', ' A 117  VAL  H  ', -0.401, (32.724, -37.778, -29.226)), (' A 704  C8E  C6 ', ' A 704  C8E  H13', -0.4, (4.84, -37.123, -39.957))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
