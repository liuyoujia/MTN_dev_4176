# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 510 ', 'HIS', 0.02827998951540309, (35.75, 58.78099999999999, 43.867))]
data['omega'] = []
data['rota'] = [('A', '  15 ', 'ILE', 0.09767370194514813, (23.017999999999994, 43.919, 10.761)), ('A', ' 129 ', 'GLU', 0.26252445359676935, (41.698, 6.978, 5.03)), ('A', ' 163 ', 'LYS', 0.19112888962200827, (45.363, 14.977, 26.803)), ('A', ' 274 ', 'ASP', 0.07699510818781946, (16.175, 51.789, 14.437)), ('A', ' 340 ', 'LEU', 0.002099574312608572, (34.434, 19.215, 1.33)), ('A', ' 424 ', 'PHE', 0.2989200603912024, (9.245999999999999, 45.24299999999999, 31.229)), ('A', ' 463 ', 'LEU', 0.29097039727483087, (9.888, 25.986, 31.831999999999997)), ('A', ' 472 ', 'ILE', 0.11198876449374837, (18.829, 19.459, 37.502)), ('A', ' 478 ', 'GLU', 0.2308020818736361, (24.232999999999997, 11.547, 39.086))]
data['cbeta'] = []
data['probe'] = [(' A  11  ARG  HG2', ' A  11  ARG HH11', -0.921, (19.135, 49.796, 7.211)), (" A 704  BOG H8'3", " A 705  BOG H8'2", -0.781, (43.031, 21.418, 35.878)), (' A 241  PRO  O  ', ' A 245  ILE HD12', -0.769, (10.227, 20.409, 27.1)), (' A  42  ALA  HB2', ' A 234  ASP  HB3', -0.759, (7.494, 14.493, 15.548)), (" A 704  BOG H8'3", " A 705  BOG  C8'", -0.735, (42.749, 20.923, 35.573)), (' A 217  GLU  HG3', ' A 222  THR HG22', -0.716, (18.618, 8.43, -3.12)), (' A  51  PHE  CZ ', ' A  56  ILE HD11', -0.693, (11.63, 36.085, 14.455)), (' A  11  ARG  HG2', ' A  11  ARG  NH1', -0.679, (19.26, 49.153, 7.433)), (' A  91  LYS  NZ ', ' A 583  HOH  O  ', -0.588, (26.809, 52.537, 41.497)), (' A  45  ILE  HB ', ' A  46  PRO  HD3', -0.579, (6.498, 21.34, 17.528)), (' A 256  SER  HG ', ' A 601  LEU  N  ', -0.568, (24.014, 33.784, 19.243)), (' A 443  LYS  NZ ', ' A 573  HOH  O  ', -0.568, (2.307, 54.864, 14.462)), (' A 274  ASP  HB2', ' A 441  ILE HG13', -0.566, (14.793, 52.032, 12.153)), (' A   8  TRP  CD1', ' A  14  LEU HD13', -0.562, (25.421, 47.989, 15.222)), (' A 245  ILE  HA ', ' A 463  LEU HD11', -0.561, (11.712, 24.167, 27.622)), (' A 214  PHE  CZ ', ' A 227  LEU HD11', -0.561, (17.419, 19.271, 1.107)), (' A 472  ILE  N  ', ' A 473  PRO  HD2', -0.558, (16.821, 18.288, 37.327)), (' A  42  ALA  HB1', ' A 237  LYS  HB2', -0.547, (7.096, 15.604, 18.681)), (' A 435  GLU  OE2', ' A 438  ARG  NH2', -0.546, (16.022, 54.506, 23.344)), (' A 321  ASN  ND2', ' A 540  HOH  O  ', -0.543, (31.32, 11.354, 19.662)), (' A 409  THR HG22', ' A 467  TRP  CZ2', -0.538, (18.86, 23.811, 29.548)), (' A  88  ARG  NH2', ' A 595  HOH  O  ', -0.516, (21.528, 52.006, 45.067)), (' A 214  PHE  CE1', ' A 227  LEU HD11', -0.51, (17.506, 19.112, 1.258)), (' A 241  PRO  C  ', ' A 245  ILE HD12', -0.5, (10.21, 19.353, 27.665)), (' A  11  ARG  CG ', ' A  11  ARG  NH1', -0.495, (19.848, 49.181, 7.926)), (' A 510  HIS  ND1', ' A 510  HIS  O  ', -0.495, (37.596, 60.034, 42.722)), (' A 154  VAL HG13', ' A 155  PRO  HD2', -0.493, (37.467, 11.089, 26.335)), (' A 327  LEU HD23', ' A 344  TRP  CE2', -0.475, (29.663, 19.045, 8.28)), (' A 130  PRO  HG3', ' A 144  PHE  HE2', -0.468, (37.26, 7.724, 6.668)), (' A 103  VAL  HA ', ' A 106  ILE HD12', -0.461, (34.041, 31.218, 31.032)), (' A 185  ARG  HG2', ' A 185  ARG HH11', -0.461, (43.172, 46.066, 14.345)), (' A  80  ILE  O  ', ' A  84  LEU  HG ', -0.458, (18.855, 48.942, 32.848)), (' A 405  PHE  CZ ', ' A 410  ILE HD11', -0.457, (20.048, 23.04, 33.525)), (' A 106  ILE HG12', ' A 389  SER  HB2', -0.452, (38.2, 30.951, 30.819)), (' A 405  PHE  CZ ', ' A 410  ILE  CG1', -0.448, (20.848, 23.819, 34.045)), (' A 361  GLN  N  ', ' A 362  PRO  CD ', -0.447, (32.014, 40.504, 24.197)), (' A 388  PHE  HE2', ' A 489  TYR  HH ', -0.446, (41.577, 30.593, 36.144)), (' A 472  ILE  N  ', ' A 473  PRO  CD ', -0.445, (17.215, 18.31, 38.223)), (' A 129  GLU  OE1', ' A 130  PRO  O  ', -0.443, (40.355, 4.176, 2.866)), (' A 299  ILE  HB ', ' A 300  PRO  HD3', -0.439, (19.662, 17.055, 8.017)), (' A  31  PHE  HB3', ' A  32  PRO  HD3', -0.434, (21.415, 23.152, 13.924)), (' A 272  ASP  HB3', ' A 560  HOH  O  ', -0.434, (17.862, 59.788, 17.911)), (' A 405  PHE  CE1', ' A 410  ILE HD11', -0.428, (20.221, 22.68, 33.068)), (' A 392  LEU HD13', " A 704  BOG H8'1", -0.427, (41.116, 23.396, 35.546)), (' A 199  MET  HB2', ' A 200  PRO  HD3', -0.427, (28.494, 38.601, 5.42)), (' A 511  GLU  C  ', ' A 526  HOH  O  ', -0.426, (32.357, 61.75, 42.047)), (' A  66  GLY  O  ', ' A 267  SER  HA ', -0.422, (23.293, 50.02, 24.054)), (' A 259  PHE  CZ ', ' A 412  VAL HG11', -0.422, (23.11, 31.491, 26.406)), (' A 124  VAL  O  ', ' A 124  VAL HG12', -0.417, (48.026, 17.791, 4.079)), (' A 392  LEU  CD1', " A 704  BOG H8'1", -0.413, (40.638, 23.038, 35.443)), (' A 104  VAL  HA ', ' A 107  TYR  CE2', -0.413, (30.14, 28.155, 27.678)), (' A 254  THR  OG1', ' A 290  GLU  OE1', -0.412, (20.636, 28.91, 15.579)), (' A  56  ILE HG22', ' A  60  TRP  CZ3', -0.411, (9.418, 40.81, 17.807)), (' A  77  THR  OG1', ' A  97  GLY  HA3', -0.409, (24.758, 41.288, 32.106)), (' A 228  ASN  O  ', ' A 232  THR  HB ', -0.408, (9.182, 14.662, 8.172)), (' A 264  THR  HB ', ' A 569  HOH  O  ', -0.404, (28.193, 42.566, 23.474)), (' A 510  HIS  CG ', ' A 510  HIS  O  ', -0.401, (37.597, 59.544, 43.479))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
