# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 535 ', 'PRO', None, (25.330999999999992, 44.216, 105.326))]
data['rota'] = [('A', '  69 ', 'GLU', 0.24616740730259867, (5.182000000000003, -6.695, 83.59200000000003))]
data['cbeta'] = []
data['probe'] = [(' A 343  GLN  OE1', ' A 973  HOH  O  ', -1.195, (0.279, 14.088, 86.315)), (' A 273  THR  HB ', ' A 274  PRO  HD2', -0.805, (25.451, 2.14, 75.599)), (' A  48  ARG  NH2', ' A 608  SO4  O3 ', -0.741, (6.785, 21.05, 88.465)), (' A 273  THR  HB ', ' A 274  PRO  CD ', -0.679, (24.926, 2.103, 75.597)), (' A 471  LYS  HD3', ' A 472  ASP  OD2', -0.574, (60.995, 27.554, 87.844)), (' A 170  LEU  HB2', ' A 216  THR HG22', -0.568, (26.879, -2.442, 103.421)), (' A  34  ILE HD11', ' A 163  LEU  CD1', -0.565, (13.688, -16.715, 93.645)), (' A 269  TYR  HE1', ' A 274  PRO  O  ', -0.556, (25.656, 2.267, 79.871)), (' A 106  LEU  HB3', ' A 345  MET  HE1', -0.547, (5.163, 7.37, 95.879)), (' A 542  GLU  OE1', ' A 741  HOH  O  ', -0.508, (34.798, 40.578, 93.723)), (' A  84  ASP  CG ', ' A 217  HIS  CE1', -0.5, (24.566, 8.158, 100.808)), (' A  57  ALA  HA ', ' A 345  MET  HG2', -0.499, (5.958, 10.049, 92.433)), (' A 284  TRP  CG ', ' A 309  MET  HE3', -0.477, (25.207, -9.826, 88.877)), (' A  60  LYS  HE2', ' A 106  LEU  HG ', -0.471, (3.002, 5.766, 94.594)), (' A 375  ARG  NH2', ' A 612  SO4  O1 ', -0.468, (30.108, 19.206, 88.444)), (' A 182  GLU  HG2', ' A 999  HOH  O  ', -0.464, (30.318, 18.317, 117.969)), (' A 336  THR  HB ', ' A 337  PRO  HD2', -0.461, (13.056, 6.0, 76.386)), (' A 121  ASN  ND2', ' A 701  HOH  O  ', -0.461, (19.974, 13.643, 107.868)), (' A  28  GLN  NE2', ' A 729  HOH  O  ', -0.46, (16.706, -28.823, 94.858)), (' A 438  MET  HG3', ' A 443  VAL HG23', -0.455, (50.964, 25.215, 109.069)), (' A  48  ARG  NE ', ' A 608  SO4  O1 ', -0.45, (8.158, 20.191, 87.655)), (' A 366  GLU  HG3', ' A 535  PRO  HB3', -0.444, (23.365, 44.307, 102.225)), (' A  98  GLU  N  ', ' A  99  PRO  HD2', -0.44, (10.721, 15.382, 103.878)), (' A 226  HIS  HD2', ' A 235  GLU  OE2', -0.434, (39.473, -0.586, 99.227)), (' A 390  LEU  O  ', ' A 394  MET  HG3', -0.43, (38.502, 31.424, 106.262)), (' A 251  GLY  O  ', ' A 252  HIS  HB3', -0.425, (28.731, 4.167, 98.097)), (' A 401  PHE  CE2', ' A 493  MET  HG3', -0.423, (46.077, 27.036, 105.718)), (' A 453  MET  HB2', ' A 461  PRO  HD3', -0.423, (44.743, 23.141, 93.046)), (' A 222  ASP  O  ', ' A 225  GLU  HG3', -0.415, (41.181, -0.391, 92.36)), (' A 176  ALA  HB3', ' A 759  HOH  O  ', -0.412, (33.614, 7.01, 112.268)), (' A  38  HIS  HA ', ' A  80  LEU  O  ', -0.408, (17.158, -0.169, 95.033)), (' A 270  VAL  HB ', ' A 273  THR HG21', -0.407, (25.754, 6.317, 76.215)), (' A 452  GLN HE22', ' A 473  GLY  HA2', -0.407, (54.832, 22.958, 92.89)), (' A 106  LEU HD23', ' A 345  MET  HE2', -0.406, (3.672, 8.171, 95.253))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
