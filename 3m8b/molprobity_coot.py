# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 116 ', 'ALA', 0.02300848822085349, (-51.099000000000004, -10.001, 7.073999999999998)), ('A', ' 121 ', 'ASP', 0.030412143595503576, (-47.308, -6.498000000000001, 16.507)), ('A', ' 456 ', 'GLU', 0.032939146261365064, (-60.44599999999999, 4.196999999999999, 23.074999999999992)), ('A', ' 535 ', 'PRO', 0.036819815751070226, (-47.548, 16.430000000000003, 38.555))]
data['omega'] = [('A', ' 535 ', 'PRO', None, (-46.782, 17.092, 39.614999999999974))]
data['rota'] = [('A', '  21 ', 'THR', 0.009519535524304956, (-39.206, -7.424, -5.769999999999996)), ('A', ' 262 ', 'LYS', 0.1451985563743013, (-40.85399999999999, -24.288, -1.4519999999999993)), ('A', ' 267 ', 'THR', 0.0027198671887163073, (-41.11099999999996, -25.907, 15.493)), ('A', ' 270 ', 'SER', 0.212361875812179, (-38.507999999999996, -20.66100000000001, 24.085999999999988)), ('A', ' 519 ', 'THR', 0.013529980252849383, (-21.089999999999996, 7.409999999999998, 11.289999999999992)), ('A', ' 540 ', 'LYS', 0.28126740389111543, (-38.561, 19.501, 25.45999999999999))]
data['cbeta'] = []
data['probe'] = [(' A 460  ARG  NH2', ' A 763  HOH  O  ', -0.94, (-53.522, 14.836, 15.018)), (' A 273  LYS  NZ ', ' A 738  HOH  O  ', -0.929, (-34.811, -20.62, 30.728)), (' A 477  HIS  HD1', ' A 505  TYR  HH ', -0.911, (-21.807, 10.935, 1.644)), (' A 477  HIS  ND1', ' A 505  TYR  OH ', -0.885, (-20.836, 11.279, 1.316)), (' A 267  THR HG23', ' A 298  VAL HG22', -0.801, (-43.956, -27.471, 15.773)), (' A 442  ASP  OD2', ' A 755  HOH  O  ', -0.782, (-60.769, -1.533, 17.694)), (' A 603  C8E  H13', ' A 603  C8E  H52', -0.776, (-35.759, 13.657, -2.387)), (' A 506  GLN  OE1', ' A 519  THR  HB ', -0.767, (-22.058, 5.456, 10.299)), (' A  86  ASN  HB2', ' A 733  HOH  O  ', -0.677, (-40.105, -16.75, 25.536)), (' A 422  PHE  CG ', ' A 602  C8E  H11', -0.677, (-41.342, 9.967, -7.642)), (' A 100  PRO  HG2', ' A 103  LEU HD12', -0.667, (-27.593, -14.399, 21.231)), (' A 446  TYR  OH ', ' A 451  LEU HD12', -0.666, (-56.97, 3.029, 38.575)), (' A  89  GLY  HA3', ' A 293  MET  HE1', -0.64, (-43.786, -13.968, 25.224)), (' A 527  TYR  CE1', ' A 540  LYS  HG3', -0.627, (-41.417, 20.237, 23.121)), (' A 255  ARG  NH1', ' A 608  MTN  O1 ', -0.623, (-34.893, -21.261, 7.128)), (' A 574  GLU  HG2', ' A 579  TYR  O  ', -0.606, (-29.693, 10.372, 29.664)), (' A 519  THR HG23', ' A 548  ASP  HB2', -0.605, (-19.739, 5.897, 13.811)), (' A 603  C8E  H11', ' A 603  C8E H171', -0.544, (-35.78, 14.708, 0.239)), (' A 335  GLN  CD ', ' A 398  LEU HD21', -0.53, (-51.125, -13.743, 27.341)), (' A 437  ARG HH21', ' A 460  ARG  HD3', -0.528, (-54.932, 11.758, 9.498)), (' A 267  THR  CG2', ' A 298  VAL HG22', -0.524, (-43.546, -26.847, 16.555)), (' A   8  LEU  O  ', ' A 106  ARG  NH2', -0.521, (-31.017, -11.0, 1.723)), (' A 412  PRO  O  ', ' A 414  LYS  NZ ', -0.51, (-58.533, -3.337, 18.325)), (' A  19  ARG  NH2', ' A  26  THR  O  ', -0.508, (-33.522, -1.847, 1.944)), (' A 448  ASP  OD1', ' A 449  HIS  N  ', -0.506, (-59.909, 7.958, 35.694)), (' A  18  PRO  O  ', ' A  21  THR HG22', -0.501, (-37.658, -9.013, -4.247)), (' A 490  ILE HD12', ' A 790  HOH  O  ', -0.492, (-57.181, 9.394, 21.611)), (' A 323  THR HG22', ' A 324  PRO  O  ', -0.489, (-45.622, -16.84, 38.455)), (' A 519  THR HG22', ' A 711  HOH  O  ', -0.488, (-18.677, 4.853, 12.23)), (' A  19  ARG HH21', ' A  26  THR HG23', -0.484, (-33.987, -3.449, 1.069)), (' A 603  C8E  C5 ', ' A 603  C8E  H13', -0.483, (-35.46, 13.307, -2.866)), (' A 227  THR  HB ', ' A 243  ARG  HB3', -0.477, (-30.187, -6.407, 34.801)), (' A 603  C8E  C17', ' A 603  C8E  H11', -0.471, (-36.126, 14.904, 0.148)), (' A 248  GLN  HG2', ' A 738  HOH  O  ', -0.471, (-34.308, -21.577, 29.442)), (' A 144  TRP  CE3', ' A 150  GLN  HG3', -0.469, (-10.763, -7.773, 28.257)), (' A 304  VAL HG23', ' A 306  VAL  CG2', -0.468, (-46.851, -20.671, -7.741)), (' A 422  PHE  CB ', ' A 602  C8E  H11', -0.461, (-40.241, 9.514, -6.924)), (' A 321  THR  HA ', ' A 333  TYR  O  ', -0.461, (-49.628, -19.236, 29.97)), (' A 436  TYR  CZ ', ' A 463  GLY  HA3', -0.457, (-43.553, 8.864, 8.275)), (' A  89  GLY  HA3', ' A 293  MET  CE ', -0.456, (-43.461, -13.999, 25.727)), (' A 155  SER  HA ', ' A 168  LEU  O  ', -0.453, (-18.568, -21.384, 17.366)), (' A 452  LYS  HB3', ' A 454  TYR  CE2', -0.451, (-61.486, 0.199, 32.572)), (' A 304  VAL HG23', ' A 306  VAL HG23', -0.451, (-46.876, -20.243, -7.952)), (' A 407  ASN  HB2', ' A 452  LYS  HD3', -0.444, (-61.173, -3.369, 31.617)), (' A 397  ASN  OD1', ' A 400  GLN  HG3', -0.443, (-51.113, -5.284, 28.759)), (' A 603  C8E  C8 ', ' A 603  C8E  H13', -0.437, (-34.623, 12.749, -1.823)), (' A 515  ASP  O  ', ' A 551  VAL  HA ', -0.437, (-11.221, 1.297, 9.651)), (' A  23  LEU HD12', ' A 374  SER  HB3', -0.431, (-46.412, -3.293, -4.036)), (' A 144  TRP  HH2', ' A 152  TYR  HH ', -0.431, (-8.936, -10.808, 27.751)), (' A  17  GLN  OE1', ' A  21  THR  CG2', -0.431, (-40.086, -10.436, -3.498)), (' A 304  VAL  O  ', ' A 304  VAL HG23', -0.429, (-46.37, -20.449, -6.926)), (' A 460  ARG  HD2', ' A 462  LYS  HE3', -0.427, (-52.383, 13.632, 9.854)), (' A 407  ASN  C  ', ' A 407  ASN  OD1', -0.423, (-61.308, -6.101, 29.763)), (' A 551  VAL HG22', ' A 552  ALA  N  ', -0.423, (-9.466, 0.211, 10.831)), (' A 263  SER  CB ', ' A 302  ASN  OD1', -0.421, (-43.827, -26.458, 1.576)), (' A  48  ARG HH12', ' A 519  THR HG21', -0.421, (-21.557, 3.428, 12.496)), (' A 422  PHE  CD1', ' A 602  C8E  H21', -0.42, (-41.056, 9.017, -9.154)), (' A 115  SER  HB2', ' A 392  SER  HA ', -0.42, (-51.834, -5.937, 10.594)), (' A  19  ARG  HE ', ' A  26  THR HG23', -0.419, (-34.177, -4.008, 0.693)), (' A 446  TYR  OH ', ' A 451  LEU  CD1', -0.416, (-57.158, 3.802, 38.418)), (' A 496  LEU  O  ', ' A 497  ARG  HB2', -0.411, (-42.226, 8.752, 23.611)), (' A 162  ASP  O  ', ' A 163  LYS  HB2', -0.408, (-23.716, -35.362, 4.552)), (' A 311  ILE HD12', ' A 604  C8E  H31', -0.407, (-52.417, -15.666, -4.898)), (' A 358  ARG  O  ', ' A 601  C8E  H71', -0.404, (-56.923, -12.474, 7.461)), (' A 587  THR HG22', ' A 588  LEU  N  ', -0.402, (-12.796, -2.112, 21.327)), (' A  29  VAL  HB ', ' A 107  VAL  HB ', -0.402, (-29.418, -6.181, 10.109)), (' A  17  GLN  OE1', ' A  21  THR HG23', -0.401, (-40.509, -10.102, -3.509)), (' A 523  LEU  O  ', ' A 543  GLY  HA2', -0.4, (-31.74, 16.386, 18.09)), (' A 142  ALA  C  ', ' A 746  HOH  O  ', -0.4, (-10.567, -9.234, 20.84))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
