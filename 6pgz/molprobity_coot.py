# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  20 ', 'ASP', 0.2404173194300743, (0.7239999999999949, 6.694000000000001, 27.133))]
data['cbeta'] = []
data['probe'] = [(' B  55  ASN  ND2', ' B 402  HOH  O  ', -1.057, (0.004, 24.951, -20.441)), (' A  80  ARG  NH2', ' B 422  HOH  O  ', -1.052, (18.306, 28.072, 21.986)), (' A  80  ARG  NE ', ' A 320  HOH  O  ', -0.923, (18.883, 25.161, 24.49)), (' B   8  ARG  NH2', ' B 403  HOH  O  ', -0.904, (4.036, 24.008, 6.067)), (' A  54  THR HG23', ' A  56  GLY  H  ', -0.826, (-10.231, 19.036, 28.753)), (' B 120  MET  HE2', ' B 128  GLU  HB3', -0.803, (29.498, 44.037, 13.46)), (' A  46  LEU HD23', ' A  54  THR HG21', -0.779, (-7.808, 19.055, 29.014)), (' A 201  MTN  H91', ' B 300  MTN  H41', -0.775, (15.464, 23.942, 10.972)), (' A  46  LEU  CD2', ' A  54  THR HG21', -0.742, (-7.621, 19.662, 28.351)), (' B  64  GLU  OE2', ' B 401  HOH  O  ', -0.739, (-0.741, 25.332, 5.344)), (' A 102  MET  HE2', ' A 138  TRP  CZ3', -0.735, (16.724, 5.97, 20.022)), (' A  80  ARG  HB2', ' A 320  HOH  O  ', -0.733, (19.496, 24.275, 25.394)), (' B 120  MET  CE ', ' B 128  GLU  HB3', -0.724, (30.009, 44.662, 13.11)), (' A 102  MET  HE1', ' A 133  LEU HD22', -0.688, (19.24, 5.891, 20.472)), (' A 161  TYR  HA ', ' A 164  LEU HD22', -0.669, (7.494, 5.955, 8.082)), (' A  25  TYR  CE1', ' A  39  LEU HD12', -0.666, (-6.047, 10.122, 32.67)), (' A 102  MET  HE2', ' A 138  TRP  CH2', -0.655, (16.379, 6.475, 19.821)), (' B 120  MET  HE2', ' B 128  GLU  CB ', -0.649, (29.137, 44.111, 13.989)), (' A  76  ARG  HD2', ' A  80  ARG HH12', -0.632, (16.194, 28.63, 24.533)), (' A  17  ILE HD11', ' A  39  LEU HD11', -0.616, (-8.1, 10.677, 31.156)), (' A  76  ARG  HG2', ' A  80  ARG HH22', -0.615, (16.7, 27.045, 22.297)), (' B  15  LEU  O  ', ' B  27  ILE HD11', -0.611, (0.83, 27.664, -8.905)), (' A  76  ARG  HG2', ' A  80  ARG  NH2', -0.604, (16.718, 26.845, 22.533)), (' A  21  THR HG21', ' A 142  THR  CG2', -0.594, (5.55, 3.98, 24.258)), (' A 106  MET  HE1', ' A 138  TRP  CD2', -0.587, (14.588, 5.886, 22.801)), (' B   6  MET  HE3', ' B 158  TRP  HZ3', -0.586, (12.15, 34.255, 12.417)), (' A   6  MET  HE3', ' A 158  TRP  HZ3', -0.575, (13.171, 10.771, 10.8)), (' A  18  TYR  CZ ', ' A  26  THR HG23', -0.568, (-1.606, 11.022, 24.308)), (' B   6  MET  HE3', ' B 158  TRP  CZ3', -0.558, (12.515, 34.248, 12.815)), (' A 106  MET  HE1', ' A 138  TRP  CG ', -0.547, (14.271, 5.555, 23.476)), (' A 115  THR  O  ', ' A 119  ARG  HG3', -0.542, (28.445, 8.278, 24.47)), (' A  18  TYR  CE2', ' A  26  THR HG23', -0.526, (-1.298, 10.325, 24.405)), (' B 116  ASN  O  ', ' B 120  MET  HG3', -0.523, (31.315, 40.326, 10.445)), (' A  27  ILE HD12', ' A  28  GLY  H  ', -0.51, (-4.186, 14.715, 22.459)), (' B   1  MET  HE1', ' B   5  GLU  OE2', -0.509, (4.007, 33.853, 13.039)), (' B   1  MET  HG2', ' B 158  TRP  CE3', -0.495, (9.714, 34.199, 15.058)), (' A  16  LYS  C  ', ' A  27  ILE HD13', -0.494, (-6.646, 13.624, 24.405)), (' B  17  ILE  N  ', ' B  27  ILE HD12', -0.486, (2.349, 29.641, -10.419)), (' A  15  LEU  H  ', ' A  15  LEU HD12', -0.485, (-8.4, 13.257, 18.919)), (' B 125  ARG  NE ', ' B 128  GLU  OE2', -0.481, (32.163, 43.967, 16.779)), (' B  32  LEU  C  ', ' B  32  LEU HD13', -0.47, (12.757, 28.833, -8.914)), (' A  18  TYR  CE2', ' A  26  THR  CG2', -0.466, (-0.942, 10.181, 25.043)), (' A  21  THR HG21', ' A 142  THR HG22', -0.466, (5.623, 3.5, 23.913)), (' B  79  LEU  O  ', ' B  85  LYS  HD2', -0.463, (28.124, 21.149, 7.675)), (' A  76  ARG  HD2', ' A  80  ARG  NH1', -0.462, (16.226, 27.861, 24.749)), (' A  35  LYS  HD2', ' A  35  LYS  N  ', -0.459, (3.914, 13.752, 35.328)), (' A  47  ASP  OD1', ' A  54  THR HG22', -0.45, (-9.143, 21.316, 30.56)), (' B  85  LYS  HB3', ' B  86  PRO  HD3', -0.447, (30.078, 24.579, 8.819)), (' A  35  LYS  H  ', ' A  35  LYS  HD2', -0.443, (4.287, 14.044, 35.292)), (' B 110  GLY  N  ', ' B 404  HOH  O  ', -0.443, (24.652, 32.627, -3.339)), (' A  46  LEU HD23', ' A  54  THR  CG2', -0.438, (-8.694, 19.273, 28.988)), (' A 102  MET  HE1', ' A 133  LEU  CD2', -0.433, (19.422, 6.076, 20.48)), (' B  32  LEU HD13', ' B  33  LEU  N  ', -0.43, (12.533, 29.111, -9.384)), (' A 148  ARG  CD ', ' A 164  LEU HD21', -0.427, (7.621, 4.244, 11.084)), (' A   5  GLU  HA ', ' A   5  GLU  OE1', -0.425, (4.549, 15.123, 9.856)), (' A  75  CYS  HB2', ' A 201  MTN  H42', -0.423, (14.476, 21.84, 17.853)), (' A  50  ILE HG21', ' A  62  GLU  OE1', -0.421, (-7.382, 24.136, 24.202)), (' A  19  LYS  HG2', ' A  23  GLY  HA2', -0.42, (-1.079, 5.161, 30.968)), (' A  80  ARG  CD ', ' A 320  HOH  O  ', -0.419, (18.871, 25.038, 25.933)), (' B 137  ARG  NH1', ' B 141  GLN  HG3', -0.415, (18.857, 42.733, -5.755)), (' A  13  LEU HD21', ' A  60  LYS  HG3', -0.414, (-5.425, 17.586, 14.872)), (' A  25  TYR  CE1', ' A  39  LEU  CD1', -0.414, (-6.785, 9.77, 33.167)), (' A  22  GLU  HA ', ' A  22  GLU  OE1', -0.411, (4.954, 2.782, 30.154)), (' A 201  MTN  H92', ' B   3  ILE HG21', -0.408, (13.72, 25.553, 11.22)), (' A  79  LEU  O  ', ' A  85  LYS  HD2', -0.406, (24.147, 23.711, 22.837)), (' A  81  ASN  HB3', ' A  84  LEU  HB2', -0.405, (21.881, 18.2, 25.109)), (' B   1  MET  HG2', ' B 158  TRP  CD2', -0.404, (9.384, 33.768, 15.425))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
