# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('B', ' 164 ', 'LEU', 0.26058985657667294, (18.341000000000015, 25.091, 90.986))]
data['cbeta'] = []
data['probe'] = [(' C 116  ASN  OD1', ' C 216  HOH  O  ', -1.077, (5.93, -26.841, 80.939)), (' C 137  ARG  NH2', ' C 188  HOH  O  ', -0.873, (-13.248, -20.05, 86.176)), (' C 128  GLU  OE2', ' C 263  HOH  O  ', -0.799, (12.924, -18.666, 75.501)), (' A 106  MET  HE1', ' A 138  TRP  CD1', -0.705, (16.648, 8.372, 50.175)), (' C 163  ASN  O  ', ' C 164  LEU  HB2', -0.692, (0.283, 5.618, 84.255)), (' B 125  ARG  HD2', ' B 128  GLU  OE2', -0.591, (36.385, 3.489, 76.487)), (' C  17  ILE HD11', ' C  46  LEU HD22', -0.585, (-10.645, -3.726, 110.89)), (' A   1  MET  HA ', ' A   5  GLU  OE1', -0.584, (-3.163, 12.09, 56.396)), (' B 920  HED  C1 ', ' B 952  HOH  O  ', -0.579, (35.476, 13.171, 99.208)), (' B   1  MET  HG2', ' B 158  TRP  CE3', -0.564, (26.593, 17.731, 94.322)), (' C  17  ILE HD12', ' C  33  LEU  CD1', -0.563, (-11.223, -6.153, 108.774)), (' B 112  ALA  O  ', ' B 945  HOH  O  ', -0.559, (34.89, -6.572, 91.683)), (' B  25  TYR  HE2', ' B  37  PRO  O  ', -0.559, (11.67, -8.51, 108.056)), (' A 106  MET  HE1', ' A 138  TRP  CG ', -0.553, (16.385, 8.75, 49.814)), (' B  37  PRO  O  ', ' C  72  ASP  OD2', -0.55, (10.347, -9.304, 108.093)), (' C   1  MET  HG2', ' C 158  TRP  HB3', -0.546, (8.099, 0.656, 90.918)), (' A1046  HOH  O  ', ' B 147  LYS  HE3', -0.522, (19.333, 10.588, 81.799)), (' A 125  ARG  HD2', ' A 128  GLU  OE1', -0.517, (12.979, 20.138, 33.259)), (' A  85  LYS  HE2', ' A  89  ASP  OD1', -0.516, (11.141, 29.675, 52.325)), (' A   9  ILE HD12', ' A 164  LEU HD22', -0.511, (-0.476, 4.031, 53.86)), (' C  18  TYR  CZ ', ' C  26  THR  OG1', -0.511, (-9.671, -6.002, 101.581)), (' B   1  MET  HG2', ' B 158  TRP  CD2', -0.491, (27.421, 17.996, 94.077)), (' C  21  THR  O  ', ' C  21  THR HG22', -0.491, (-16.24, -10.819, 94.167)), (' C  24  TYR  CE2', ' C  35  LYS  HD3', -0.488, (-12.429, -16.746, 101.067)), (' A   5  GLU  O  ', ' A   9  ILE HG12', -0.484, (1.396, 7.243, 56.655)), (' B 120  MET  HE1', ' B 125  ARG  NH2', -0.484, (38.124, 0.202, 78.667)), (' B  83  LYS  NZ ', ' B 945  HOH  O  ', -0.479, (35.136, -6.542, 91.762)), (' C  59  THR  OG1', ' C  62  GLU  HG3', -0.474, (-1.987, 2.85, 112.918)), (' C  18  TYR  CE2', ' C  26  THR  OG1', -0.474, (-10.008, -5.5, 102.077)), (' C  11  GLU  OE1', ' C  30  GLY  HA3', -0.472, (-4.256, -7.188, 99.201)), (' B  83  LYS  NZ ', ' B 112  ALA  O  ', -0.47, (35.184, -6.042, 91.245)), (' A 146  ALA  O  ', ' A 150  ILE HG13', -0.466, (11.049, 8.529, 45.208)), (' B  37  PRO  O  ', ' C  72  ASP  CG ', -0.459, (10.415, -9.305, 107.742)), (' A 158  TRP  HB2', ' A 162  LYS  HE3', -0.454, (-3.7, 11.602, 49.119)), (' C 119  ARG  NH2', ' C 216  HOH  O  ', -0.451, (7.479, -27.335, 81.934)), (' A 966  HOH  O  ', ' B 135  LYS  HE3', -0.45, (25.807, -7.107, 78.153)), (' A  40  ASN  OD1', ' A 900  HED  H12', -0.447, (23.726, -2.97, 77.184)), (' B  76  ARG  O  ', ' B  80  ARG  HG2', -0.429, (37.988, -0.08, 103.823)), (' C  17  ILE HD13', ' C  27  ILE HD12', -0.428, (-10.471, -2.955, 108.707)), (' B  94  VAL HG23', ' B 995  HOH  O  ', -0.427, (34.837, 17.485, 91.348)), (' C  14  ARG  NH1', ' C  18  TYR  HB2', -0.416, (-13.516, -1.815, 101.286)), (' B   1  MET  HA ', ' B   5  GLU  OE1', -0.415, (26.266, 20.545, 98.869)), (' A  14  ARG  HG3', ' A  18  TYR  CE1', -0.414, (11.056, -0.537, 64.122)), (' C 114  PHE  O  ', ' C 118  LEU  HG ', -0.412, (5.636, -21.419, 87.923)), (' B  83  LYS  HB3', ' B  83  LYS  HE2', -0.411, (37.503, -3.855, 91.769)), (' B 106  MET  HE1', ' B 138  TRP  CG ', -0.41, (24.004, -0.041, 92.518)), (' A  87  VAL  O  ', ' A  91  LEU  HG ', -0.404, (9.661, 23.4, 47.115)), (' A 164  LEU  OXT', ' A 164  LEU HD23', -0.404, (-3.005, 2.448, 53.002)), (' A  20  ASP  C  ', ' A  20  ASP  OD1', -0.404, (18.964, 0.334, 59.118)), (' C  24  TYR  CZ ', ' C  35  LYS  HD3', -0.402, (-12.858, -16.722, 101.276)), (' C  83  LYS  CE ', ' C 202  HOH  O  ', -0.4, (6.739, -26.077, 89.976)), (' C  16  LYS  H  ', ' C  16  LYS  HG2', -0.4, (-10.546, 1.546, 104.891))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
