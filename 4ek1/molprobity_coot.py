# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', '  89 ', 'PRO', None, (11.131, -6.847, 7.951)), ('A', ' 100 ', 'PRO', None, (13.676, 6.689000000000002, -5.447)), ('A', ' 106 ', 'PRO', None, (8.616999999999997, 1.52, -15.694)), ('B', '  89 ', 'PRO', None, (1.6250000000000142, -6.655, 45.373)), ('B', ' 100 ', 'PRO', None, (2.093, 6.701999999999999, 31.742)), ('B', ' 106 ', 'PRO', None, (-4.979000000000001, 1.028, 23.144))]
data['rota'] = [('A', ' 172 ', 'GLU', 0.05548552471537332, (23.524, 19.951000000000004, 15.085999999999997))]
data['cbeta'] = []
data['probe'] = [(' B  99  ILE HG12', ' B 103  MET  HE3', -0.866, (-2.469, 7.394, 32.053)), (' A 163  PHE  CE2', ' A 246  LEU HD12', -0.833, (20.071, 13.656, 3.135)), (' A 313  LYS  NZ ', ' A 747  HOH  O  ', -0.82, (-1.466, -17.023, -5.307)), (' B  49  ASN  HB3', ' B 504  MTN  H81', -0.742, (15.647, -29.305, 40.009)), (' B  68  GLY  HA3', ' B 331  GLU  OE2', -0.727, (14.202, -14.234, 27.553)), (' A 163  PHE  HE2', ' A 246  LEU HD12', -0.674, (20.669, 14.468, 3.672)), (' B 177  LEU  O  ', ' B 181  THR HG23', -0.66, (10.01, 10.326, 46.069)), (' A 501  HEM HBB2', ' A 501  HEM HMB1', -0.651, (28.551, 0.196, -0.338)), (' A 131  ILE HG12', ' A 162 AILE HD13', -0.599, (32.893, 13.806, 0.745)), (' B 158  PHE  HB3', ' B 159  PRO  HD3', -0.597, (23.66, 10.179, 40.577)), (' A 158  PHE  HB3', ' A 159  PRO  HD3', -0.594, (33.759, 10.458, 6.913)), (' B  47  GLU  OE2', ' B 624  HOH  O  ', -0.59, (20.299, -21.44, 41.395)), (' B 164  MET  HE3', ' B 169  LEU  HB2', -0.577, (12.328, 18.92, 42.156)), (' B 161  ARG  NH1', ' B 689  HOH  O  ', -0.544, (24.074, 18.992, 44.709)), (' A 163  PHE  HE2', ' A 246  LEU  CD1', -0.542, (20.023, 14.35, 3.947)), (' B 184  MET  HE1', ' B 247  VAL HG21', -0.541, (5.948, 6.474, 41.929)), (' A  41  ALA  O  ', ' A  44  VAL HG22', -0.523, (25.992, -16.906, 7.787)), (' A 172 AGLU  CD ', ' A 172 AGLU  H  ', -0.503, (24.032, 21.716, 13.525)), (' A 373 AGLU  HG2', ' A 664  HOH  O  ', -0.502, (43.218, 12.189, 0.157)), (' A 174  ILE  HB ', ' A 175  PRO  HD3', -0.493, (24.569, 15.013, 14.67)), (' B 150  PHE  CZ ', ' B 261  MET  HG3', -0.489, (28.489, 4.387, 41.98)), (' B 114  LEU HD23', ' B 241  MET  HE1', -0.482, (0.933, 13.477, 29.173)), (' A 181  THR  HA ', ' A 184  MET  HE3', -0.482, (16.493, 6.218, 8.484)), (' B  41  ALA  O  ', ' B  44  VAL HG22', -0.48, (16.011, -17.117, 43.466)), (' A  98  PHE  HB3', ' A 244  LEU  HB2', -0.474, (14.104, 6.864, -0.591)), (' B 277  ARG  HB3', ' B 279  GLU  OE2', -0.468, (40.413, -0.16, 25.062)), (' B 183  GLN  NE2', ' B 699  HOH  O  ', -0.468, (10.532, 4.144, 52.172)), (' B  99  ILE  CG1', ' B 103  MET  HE3', -0.466, (-3.067, 7.793, 32.76)), (' A 163  PHE  CZ ', ' A 246  LEU HD12', -0.463, (20.578, 13.502, 2.94)), (' A 150  PHE  CZ ', ' A 261  MET  HG3', -0.457, (38.818, 4.223, 8.519)), (' A 223  VAL HG13', ' A 241  MET  HE3', -0.451, (13.811, 14.964, -5.745)), (' B  69  GLN  HG2', ' B  70  LEU HD12', -0.451, (8.702, -18.114, 26.04)), (' B 184  MET  CE ', ' B 247  VAL HG21', -0.45, (6.051, 5.86, 42.576)), (' B 294  LEU  N  ', ' B 294  LEU HD23', -0.446, (17.51, -3.869, 37.201)), (' B 101  THR  CG2', ' B 501  HEM HAD2', -0.441, (5.875, 3.441, 31.999)), (' B 501  HEM HBB2', ' B 501  HEM HMB1', -0.44, (17.5, 0.407, 34.662)), (' A 501  HEM  CMC', ' A 501  HEM HBC2', -0.436, (25.597, 8.683, -0.946)), (' B 271  ARG  HD2', ' B 381  PHE  CE1', -0.436, (37.282, 1.598, 41.199)), (' A 501  HEM  CMB', ' A 501  HEM HBB2', -0.435, (27.883, 0.497, 0.115)), (' B 179  TYR  OH ', ' B 191  MET  HE3', -0.428, (6.586, 6.909, 55.102)), (' B 164  MET  CE ', ' B 169  LEU  HB2', -0.424, (12.359, 18.493, 42.647)), (' A  78  TYR  CD2', ' A 105  PRO  HD2', -0.423, (10.358, -2.851, -12.881)), (' B 244  LEU HD11', ' B 502  CAM  H31', -0.423, (6.741, 4.141, 35.437)), (' A 121  MET  HB3', ' A 122  PRO  HD3', -0.419, (28.83, 11.893, -13.337)), (' A 117  GLN  NE2', ' A 659  HOH  O  ', -0.411, (16.496, 16.464, -13.816)), (' B 179  TYR  OH ', ' B 191  MET  CE ', -0.41, (6.034, 7.068, 55.041)), (' B 350  PHE  HB3', ' B 357  CYS  HB3', -0.403, (14.016, 0.93, 29.044)), (' B  17  HIS  CD2', ' B 313  LYS  HG2', -0.403, (-6.898, -20.334, 36.846))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
