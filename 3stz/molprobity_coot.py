# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   2 ', 'VAL', 0.012417763914830548, (128.111, 121.51, -19.080999999999996)), ('A', ' 119 ', 'ALA', 0.007582137178820449, (145.879, 105.318, 2.609)), ('B', ' 199 ', 'LYS', 0.022348434939912176, (123.69200000000006, 134.468, 22.862999999999996))]
data['omega'] = [('A', ' 152 ', 'PRO', None, (139.176, 108.88000000000001, -0.267)), ('A', ' 154 ', 'PRO', None, (136.005, 113.904, -2.222)), ('A', ' 194 ', 'PRO', None, (105.816, 111.349, 7.055999999999999)), ('B', '   8 ', 'PRO', None, (139.68599999999998, 145.244, 2.172)), ('B', '  95 ', 'PRO', None, (152.144, 136.354, -16.847)), ('B', ' 141 ', 'PRO', None, (124.27100000000007, 135.159, 16.083))]
data['rota'] = [('A', ' 185 ', 'SER', 0.07379185289093824, (120.45100000000006, 117.69500000000001, 7.248)), ('A', ' 200 ', 'CYS', 0.11905666915474922, (119.42500000000001, 111.241, 0.6489999999999999)), ('B', '   7 ', 'SER', 0.2754194309437848, (141.70199999999997, 144.504, 1.005)), ('C', '  58 ', 'GLN', 0.19778561392499297, (151.29099999999997, 142.589, -23.449))]
data['cbeta'] = []
data['probe'] = [(' A  81  MET  HE3', ' A  83  LEU HD21', -0.943, (148.821, 119.467, -12.093)), (' B 147  LYS  NZ ', ' B 154  GLU  OE1', -0.881, (129.615, 120.19, 30.497)), (' B  78  VAL HG11', ' B 104  LEU HD21', -0.721, (127.065, 141.025, 0.121)), (' A 140  MET  HE3', ' A 187  THR HG22', -0.703, (112.145, 122.71, 6.865)), (' B   8  PRO  HG2', ' B  11  LEU  CD1', -0.688, (136.233, 144.861, 2.93)), (' B 193  THR HG22', ' B 208  SER  HB3', -0.63, (118.731, 113.373, 27.217)), (' B 126  THR  O  ', ' B 126  THR HG22', -0.618, (124.676, 94.592, 11.466)), (' C  33  THR  O  ', ' C  37  VAL HG23', -0.618, (143.324, 142.502, -47.697)), (' A  81  MET  HE3', ' A  83  LEU  CD2', -0.608, (148.877, 118.951, -12.365)), (' C  74  THR  O  ', ' C  75  THR  OG1', -0.603, (153.38, 153.169, -42.223)), (' A  83  LEU  HB3', ' A  86  LEU HD21', -0.591, (151.225, 116.112, -10.215)), (' B  33  ILE HG21', ' B  71  PHE  CD2', -0.584, (139.362, 146.899, -13.004)), (' A 185  SER  HB2', ' B 135  PHE  CE2', -0.562, (120.493, 117.472, 9.521)), (' B  63  SER  O  ', ' B  73  LEU HD12', -0.556, (131.154, 144.665, -9.679)), (' A 207  SER  O  ', ' A 209  THR HG23', -0.546, (132.405, 102.826, -5.944)), (' A  12  VAL  O  ', ' A 116  VAL  HA ', -0.545, (147.999, 111.276, -3.091)), (' B  55  ILE  HB ', ' B  58  ILE  CD1', -0.543, (127.815, 137.801, -16.204)), (' A  31  SER  HB2', ' C  62  TYR  CE2', -0.541, (141.99, 132.96, -30.272)), (' B 193  THR HG22', ' B 208  SER  CB ', -0.54, (118.875, 114.14, 26.873)), (' B  13  VAL HG21', ' B  78  VAL HG21', -0.538, (126.559, 143.967, 1.193)), (' A 182  LEU  C  ', ' A 182  LEU HD12', -0.535, (128.277, 113.825, 6.258)), (' A 197  THR  OG1', ' A 214  LYS  HD2', -0.531, (110.597, 107.518, 0.434)), (' B 183  LYS  O  ', ' B 187  GLU  HG2', -0.521, (125.925, 98.57, 23.157)), (' A 173  ALA  HA ', ' A 182  LEU  HB3', -0.519, (132.001, 115.547, 6.553)), (' C  34  VAL  O  ', ' C  38  ILE HG13', -0.509, (144.593, 138.457, -47.841)), (' B  76  ASN  O  ', ' B  77  SER  HB3', -0.509, (120.856, 145.706, -4.269)), (' A 119  ALA  HB3', ' A 151  PHE  CE2', -0.502, (144.288, 107.463, 2.22)), (' B 195  GLU  HG2', ' B 206  VAL HG13', -0.493, (120.84, 120.242, 27.165)), (' A  33  TRP  CE3', ' A  50  GLU  HG3', -0.491, (147.887, 129.159, -23.566)), (' A  23  LYS  HE2', ' A  78  THR  OG1', -0.491, (137.89, 114.169, -24.071)), (' B  11  LEU HD23', ' B  19  VAL  CG2', -0.488, (131.374, 144.392, 0.444)), (' A 199  THR HG23', ' A 213  LYS  C  ', -0.486, (117.527, 107.077, 1.04)), (' B  61  ARG  NH1', ' B  82  ASP  OD1', -0.482, (123.648, 138.82, -5.457)), (' C  44  SER  OG ', ' C  66  LEU  HA ', -0.479, (145.548, 141.017, -35.554)), (' A 124  PRO  HB3', ' A 150  TYR  HB3', -0.477, (132.495, 107.414, 2.718)), (' C  51  GLU  HG3', ' C  59  LEU  HB3', -0.475, (152.433, 140.008, -28.485)), (' C 118  GLU  O  ', ' C 122  ARG  HG3', -0.47, (149.204, 162.371, -72.469)), (' B  14  SER  O  ', ' B  17  GLU  HB2', -0.469, (123.299, 146.31, 3.863)), (' B 146  VAL  O  ', ' B 146  VAL HG13', -0.466, (129.295, 120.741, 22.379)), (' A   1  GLN  N  ', ' A   1  GLN  OE1', -0.466, (124.578, 123.355, -22.966)), (' C  82  CYS  HB2', ' C  83  PRO  HD2', -0.464, (156.313, 145.652, -30.697)), (' B  78  VAL HG12', ' B  79  GLU  H  ', -0.462, (123.912, 140.632, -0.433)), (' A 128  PRO  HB3', ' A 215  ILE HD12', -0.46, (117.355, 108.178, 7.22)), (' A  17  SER  HB2', ' A  83  LEU  O  ', -0.459, (152.394, 112.449, -12.288)), (' A 143  LEU  HB3', ' A 215  ILE HG21', -0.458, (115.109, 111.775, 7.803)), (' A  51  ILE HD13', ' A  58  ALA  HB2', -0.457, (150.065, 122.97, -23.829)), (' B  61  ARG  HG3', ' B  76  ASN  O  ', -0.457, (121.902, 145.131, -5.44)), (' B  37  GLN  HB2', ' B  47  LEU HD11', -0.448, (130.708, 136.769, -8.085)), (' A 155  VAL  CG2', ' A 182  LEU HD21', -0.447, (130.472, 114.279, 2.631)), (' A 124  PRO  HB2', ' A 147  VAL HG13', -0.445, (129.173, 108.33, 3.211)), (' A  17  SER  HB2', ' A  84  SER  HA ', -0.443, (153.318, 112.579, -11.905)), (' A  13  LYS  O  ', ' A  14  PRO  C  ', -0.44, (153.357, 109.29, -3.961)), (' A 219  ASP  O  ', ' A 219  ASP  OD1', -0.438, (108.968, 101.537, 16.734)), (' B  78  VAL HG12', ' B  79  GLU  N  ', -0.438, (123.843, 140.498, -0.133)), (' B  55  ILE  HB ', ' B  58  ILE HD12', -0.435, (127.693, 137.794, -16.265)), (' B  93  ARG HH12', ' C  58  GLN  HG2', -0.434, (152.596, 145.775, -21.806)), (' A  51  ILE HD12', ' A  57  ARG  O  ', -0.432, (149.326, 124.445, -25.302)), (' B 211  ARG  HG2', ' B 211  ARG HH11', -0.432, (119.124, 100.812, 25.159)), (' B 126  THR  CG2', ' B 126  THR  O  ', -0.432, (124.27, 94.556, 12.116)), (' B 136  LEU HD11', ' B 196  ALA  HB2', -0.431, (122.645, 123.139, 20.799)), (' A  39  GLN HE22', ' B  38  GLN HE22', -0.43, (137.161, 127.301, -5.67)), (' B 125  LEU  C  ', ' B 127  SER  H  ', -0.429, (125.515, 97.543, 14.039)), (' B  55  ILE  HB ', ' B  58  ILE HD13', -0.425, (128.253, 138.086, -15.769)), (' A  52  ILE  O  ', ' A  52  ILE HG23', -0.424, (147.699, 125.242, -28.477)), (' A  63  LYS  HD2', ' A  63  LYS  O  ', -0.424, (158.198, 130.299, -7.887)), (' B 187  GLU  HA ', ' B 187  GLU  OE1', -0.42, (122.89, 99.413, 24.524)), (' A 193  TRP  CD1', ' A 194  PRO  HA ', -0.418, (107.815, 111.522, 5.663)), (' B  12  SER  HB3', ' B 107  LYS  HE2', -0.417, (129.302, 143.028, 8.844)), (' B  19  VAL HG12', ' B  78  VAL HG22', -0.417, (126.293, 144.31, -1.11)), (' B 188  ARG  O  ', ' B 189  HIS  CG ', -0.412, (125.938, 103.865, 29.892)), (' B 113  PRO  HG3', ' B 144  ILE HD11', -0.411, (122.316, 127.231, 19.37)), (' A 201  ASN  ND2', ' A 212  ASP  OD1', -0.41, (119.268, 108.9, -4.396)), (' C  79  GLY  O  ', ' C 201  MTN  H41', -0.409, (154.226, 150.453, -26.159)), (' B 210  ASN  O  ', ' B 212  ASN  N  ', -0.407, (115.736, 104.594, 25.01)), (' B 193  THR HG22', ' B 208  SER  OG ', -0.407, (119.014, 114.488, 27.58)), (' B  15  PRO  HD3', ' B 107  LYS  O  ', -0.407, (122.498, 142.022, 8.155)), (' A 152  PRO  HD2', ' A 206  ALA  CB ', -0.406, (138.344, 108.321, -3.311)), (' B  14  SER  O  ', ' B  15  PRO  C  ', -0.406, (121.574, 144.739, 4.035)), (' A  52  ILE HG21', ' C  49  LEU HD11', -0.402, (149.307, 128.297, -29.57)), (' B  93  ARG  CG ', ' B  93  ARG HH11', -0.402, (151.731, 144.359, -19.349))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
