# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 393 ', 'VAL', 0.2650429205901716, (38.19200000000001, 22.871, 29.601000000000006)), ('A', ' 424 ', 'PHE', 0.24939080916207035, (9.406000000000002, 45.471, 31.296000000000006)), ('A', ' 506 ', 'ARG', 0.00011907623892435946, (34.172999999999995, 52.984, 44.13400000000001))]
data['cbeta'] = []
data['probe'] = [(' A  42  ALA  HB1', ' A 237  LYS  HB2', -0.683, (7.027, 15.576, 18.44)), (' A 245  ILE HG12', ' A 463  LEU  CD1', -0.647, (11.846, 23.362, 28.875)), (' A 367  LEU  HB3', ' A 373  LEU HD22', -0.642, (39.708, 47.148, 31.344)), (' A  11  ARG  CZ ', ' A 278  SER  OG ', -0.622, (18.73, 48.359, 11.404)), (' A  42  ALA  HB2', ' A 234  ASP  HB3', -0.621, (7.292, 14.855, 15.48)), (' A 363  MET  HA ', ' A 363  MET  HE3', -0.586, (33.897, 42.778, 31.18)), (' A  11  ARG  NH2', ' A 274  ASP  OD1', -0.567, (16.216, 49.376, 11.658)), (' A 214  PHE  CZ ', ' A 227  LEU HD11', -0.562, (17.506, 20.063, 0.804)), (' A 245  ILE HG12', ' A 463  LEU HD12', -0.561, (11.377, 23.717, 29.855)), (' A 420  LEU  C  ', ' A 420  LEU HD23', -0.523, (10.804, 41.429, 31.025)), (' A 259  PHE  CZ ', ' A 412  VAL HG11', -0.519, (23.071, 31.368, 26.462)), (' A  18  MET  HE2', ' A 265  TYR  HB3', -0.515, (24.798, 44.892, 18.243)), (' A  45  ILE  HB ', ' A  46  PRO  HD3', -0.514, (6.141, 21.585, 17.201)), (' A 506  ARG  HG2', ' A 506  ARG HH11', -0.513, (32.997, 50.563, 45.95)), (' A  53  LEU HD23', " A 701  BOG  C8'", -0.5, (4.158, 34.835, 19.887)), (' A   8  TRP  CD1', ' A  14  LEU HD13', -0.498, (25.736, 48.69, 15.422)), (' A 124  VAL  O  ', ' A 124  VAL HG12', -0.498, (48.173, 18.357, 4.581)), (' A 256  SER  HG ', ' A 601  LEU  N  ', -0.496, (23.976, 33.892, 19.474)), (' A 299  ILE  HB ', ' A 300  PRO  HD3', -0.489, (19.547, 17.224, 7.792)), (' A 110  TYR  CZ ', ' A 394  MET  HG2', -0.488, (41.397, 22.874, 24.96)), (' A 420  LEU  O  ', ' A 420  LEU HD23', -0.481, (10.672, 42.204, 31.631)), (' A 331  PHE  O  ', ' A 337  GLY  HA3', -0.475, (34.608, 12.952, 0.573)), (' A  18  MET  CE ', ' A 265  TYR  HB3', -0.473, (24.736, 44.371, 18.22)), (' A  42  ALA  HB1', ' A 237  LYS  CB ', -0.472, (7.422, 15.265, 18.633)), (' A 154  VAL HG13', ' A 155  PRO  HD2', -0.467, (37.678, 10.946, 26.382)), (' A 506  ARG  CG ', ' A 506  ARG HH11', -0.463, (33.067, 49.931, 46.195)), (' A  45  ILE  HB ', ' A 238  LEU HD21', -0.454, (5.102, 21.256, 17.15)), (' A 202  LEU  C  ', ' A 202  LEU HD23', -0.453, (27.868, 31.141, 5.907)), (' A 214  PHE  CE1', ' A 296  SER  HB3', -0.444, (19.716, 20.941, 2.546)), (' A 506  ARG  HG2', ' A 506  ARG  NH1', -0.438, (32.798, 50.627, 45.797)), (' A 124  VAL  CG1', ' A 124  VAL  O  ', -0.431, (48.402, 18.602, 4.181)), (' A 458  ALA  O  ', ' A 462  VAL HG23', -0.423, (5.298, 29.973, 32.858)), (' A 254  THR  OG1', ' A 290  GLU  OE1', -0.418, (20.777, 28.917, 15.729)), (' A  46  PRO  HG2', ' A 243  VAL HG12', -0.417, (9.251, 20.481, 20.712)), (' A 361  GLN  N  ', ' A 362  PRO  CD ', -0.406, (32.391, 40.681, 24.396)), (' A  58  LEU  HA ', ' A  58  LEU HD23', -0.402, (13.445, 39.891, 25.365)), (' A  66  GLY  O  ', ' A 267  SER  HA ', -0.401, (23.446, 50.328, 24.113))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
