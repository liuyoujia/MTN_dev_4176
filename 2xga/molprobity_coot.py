# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', '  31 ', 'SER', None, (20.454000000000015, 20.017, -1.787)), ('A', '  32 ', 'ALA', None, (23.824000000000012, 19.270999999999997, -3.016999999999999)), ('B', '  32 ', 'ALA', None, (44.14, 29.422999999999984, 30.98799999999999))]
data['rota'] = [('A', '  24 ', 'ILE', 0.0, (24.669000000000004, 27.402999999999977, -11.544)), ('A', ' 124 ', 'GLN', 0.16506404429028684, (40.426, 34.297, -5.6679999999999975)), ('B', '  25 ', 'THR', 0.24075974239429246, (50.55600000000002, 24.37, 35.599)), ('B', '  31 ', 'SER', 0.23000938250133185, (41.68200000000001, 29.638999999999996, 30.944999999999993))]
data['cbeta'] = []
data['probe'] = [(' A 108  TYR  HB3', ' A 118  ILE HD11', -0.912, (29.872, 36.361, 3.95)), (' B  76  LEU HD12', ' B  79  MET  HE2', -0.816, (52.085, 16.512, 10.238)), (' A 108  TYR  CB ', ' A 118  ILE HD11', -0.755, (29.244, 35.678, 4.922)), (' A  31  SER  CB ', ' A  32  ALA  HA ', -0.749, (22.93, 21.297, -3.295)), (' B  77  MET  HE2', ' B  91  LEU  HB2', -0.693, (48.663, 24.209, 9.861)), (' A  31  SER  OG ', ' A  32  ALA  HA ', -0.661, (23.596, 21.78, -2.589)), (' B   6  LEU HD21', ' B  45  ILE HG22', -0.615, (41.423, 21.907, 28.142)), (' B 108  TYR  HB3', ' B 118  ILE HD11', -0.601, (39.318, 12.219, 21.889)), (' B  17  ILE HD11', ' B1019  MTN  H92', -0.56, (51.115, 11.874, 27.437)), (' A  31  SER  HB2', ' A  32  ALA  C  ', -0.559, (23.329, 21.447, -4.519)), (' B  14  LEU HD12', ' B  24  ILE HD11', -0.557, (49.302, 16.633, 33.591)), (' A  37  LEU HD13', ' A 123  TYR  CE1', -0.554, (35.725, 30.662, -10.926)), (' A  76  LEU HD23', ' A  77  MET  CE ', -0.542, (45.83, 27.089, -0.737)), (' A  31  SER  HB2', ' A  32  ALA  HA ', -0.538, (23.216, 21.671, -3.485)), (' A  31  SER  CB ', ' A  32  ALA  CA ', -0.531, (23.347, 20.811, -3.344)), (' A  31  SER  HB2', ' A  32  ALA  CA ', -0.53, (22.943, 21.074, -3.591)), (' B   6  LEU  O  ', ' B  10  VAL HG23', -0.524, (42.008, 18.731, 31.397)), (' A  76  LEU  HG ', ' A  77  MET  HE2', -0.513, (45.925, 28.482, 0.127)), (' A  45  ILE HG12', ' A  54  LEU HD22', -0.51, (29.739, 28.141, -2.305)), (' A 105  LYS  HG3', ' A2040  HOH  O  ', -0.502, (29.117, 34.562, 12.066)), (' B  25  THR HG23', ' B  34  THR  HB ', -0.499, (50.942, 25.721, 32.065)), (' A   6  LEU HD21', ' A  45  ILE HG22', -0.498, (25.207, 26.448, -0.335)), (' B  14  LEU HD12', ' B  24  ILE  CD1', -0.486, (49.017, 16.799, 33.622)), (' A  17  ILE HD11', ' A1019  MTN  H92', -0.482, (29.881, 36.536, -8.36)), (' A  63  ASP  OD1', ' B  71  TYR  OH ', -0.477, (56.253, 14.903, -1.315)), (' A  45  ILE HG12', ' A  54  LEU  CD2', -0.463, (29.536, 28.384, -1.486)), (' A  77  MET  HE1', ' A 100  LEU HD21', -0.46, (43.752, 26.634, -0.796)), (' A 124 BGLN  HA ', ' A 124 BGLN  NE2', -0.454, (40.263, 35.19, -7.393)), (' A  44  ASN  HB2', ' A  55  TRP  CE2', -0.453, (31.547, 21.316, -2.611)), (' A  26  ASP  O  ', ' A  26  ASP  OD1', -0.451, (19.038, 21.488, -8.967)), (' B  80 BASN  OD1', ' B  87  GLU  HG2', -0.45, (41.085, 13.748, 9.029)), (' B 108  TYR  HB3', ' B 118  ILE  CD1', -0.446, (39.843, 13.003, 22.258)), (' A  37  LEU HD13', ' A 123  TYR  CD1', -0.441, (35.833, 31.054, -10.006)), (' A  79  MET  HE2', ' A 125  ARG  CZ ', -0.438, (43.333, 35.064, 1.268)), (' B  77  MET  CE ', ' B  91  LEU  HB2', -0.436, (49.134, 23.799, 10.581)), (' B  83  TYR  CG ', ' B 118  ILE HG12', -0.43, (42.205, 12.481, 19.505)), (' B  32  ALA  CB ', ' B  46  ALA  HB2', -0.426, (43.601, 27.422, 28.33)), (' B  44  ASN  HB2', ' B  55  TRP  CE2', -0.424, (47.319, 26.973, 24.38)), (' B  17  ILE  CD1', ' B1019  MTN  H92', -0.423, (51.222, 11.539, 27.783)), (' A  34  THR HG23', ' A  42  ALA  HB1', -0.42, (30.465, 23.435, -9.507)), (' A  76  LEU  CG ', ' A  77  MET  HE2', -0.418, (45.95, 28.791, -0.279)), (' A  73  ILE  O  ', ' A  77  MET  HG2', -0.403, (48.222, 26.772, 1.389)), (' A  77  MET  SD ', ' A  91  LEU  HB2', -0.401, (44.837, 24.955, 2.068))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
